# Task ID: 7
# Title: Create Basic Visualization Tools
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Develop simple tools to visualize training metrics.
# Details:
Use matplotlib to generate static plots of loss and accuracy over time. Provide functions to save plots to files.

# Test Strategy:
Generate plots from recorded metrics and verify they accurately represent the training progress.

# Subtasks:
## 1. Plotting loss over time [done]
### Dependencies: None
### Description: Create a plot showing the loss values over the training epochs.
### Details:
Use the recorded loss values from each epoch to generate a line plot. Ensure the plot has appropriate labels for the x-axis (epochs) and y-axis (loss).
<info added on 2025-05-11T04:30:43.059Z>
The task 'Plotting loss over time' has been completed with the following implementations:
1. Created directory structure 'src/visualization' with '__init__.py' and 'metrics_plots.py' files.
2. Implemented two main functions in 'metrics_plots.py':
   - 'plot_loss()': Specifically for plotting loss curves, supporting data loading from files or MetricsLogger instances.
   - 'plot_training_history()': Capable of plotting various metric curves, including loss and accuracy.

Key features:
- Supports loading data from CSV and JSON metric files.
- Direct usage of MetricsLogger instances.
- Rich customization options: chart size, title, grid display, DPI, etc.
- Supports display or saving to a specified path.
- Created a complete test script 'scripts/test_loss_plot.py' to verify all functionalities.
- Comprehensive error handling and logging.
- Detailed documentation and example code.

Test results:
- Successfully generated loss curves from CSV files.
- Successfully generated loss curves from MetricsLogger instances.
- Successfully generated curves for multiple metrics.

Output file paths:
- 'temp_metrics/plots/loss_curve.png'
- 'temp_metrics/plots/loss_curve_test1.png'
- 'temp_metrics/plots/loss_curve_test2.png'
</info added on 2025-05-11T04:30:43.059Z>

## 2. Plotting accuracy over time [done]
### Dependencies: None
### Description: Create a plot showing the accuracy values over the training epochs.
### Details:
Use the recorded accuracy values from each epoch to generate a line plot. Ensure the plot has appropriate labels for the x-axis (epochs) and y-axis (accuracy).
<info added on 2025-05-11T04:43:41.337Z>
Implemented the training accuracy curve plotting functionality. Key features include: 1) Added plot_accuracy function mirroring plot_loss's interface with additional y_lim and use_percentage options. 2) Updated __init__.py to export the new function. 3) Enhanced plot_training_history to utilize plot_accuracy for accuracy metrics. 4) Included example usage code. 5) Conducted successful testing with simulated data, generating clear accuracy progression charts. Supports displaying both training and validation accuracy, flexible plotting options, and automatic output directory creation.
</info added on 2025-05-11T04:43:41.337Z>

## 3. Saving plots to files [pending]
### Dependencies: 7.1, 7.2
### Description: Save the generated loss and accuracy plots to files.
### Details:
Save the plots created in subtasks 1 and 2 to image files (e.g., PNG or JPEG format) in a specified directory. Ensure the filenames are descriptive and include timestamps if necessary.

